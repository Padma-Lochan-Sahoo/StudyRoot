import axios from "axios";
import User from "../models/user.model.js";
import Course from "../models/Course.js";
import Semester from "../models/Semester.js";
import Subject from "../models/Subject.js";
import Note from "../models/Note.js";
import { streamUpload } from "../lib/cloudinary.js";
import path from "path";

// format date
export const formatDate = (date) => {
  const d = new Date(date);
  const day = String(d.getDate()).padStart(2, "0");
  const month = String(d.getMonth() + 1).padStart(2, "0"); // Months start from 0
  const year = d.getFullYear();
  return `${day}-${month}-${year}`;
};

export const getNotesBySubject = async (req, res) => {
  const { subjectId } = req.params;
  try {
    const notes = await Note.find({ subject: subjectId });
    res.status(200).json(notes);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching notes for subject", error });
  }
};
export const uploadNote = async (req, res) => {
  try {
    const { course, semester, subjectName, title } = req.body;

    // Step 1: Get or create Course
    let foundCourse = await Course.findOne({ name: course });
    if (!foundCourse) {
      foundCourse = await Course.create({ name: course });
    }

    // Step 2: Get or create Semester
    let foundSemester = await Semester.findOne({
      course: foundCourse._id,
      number: parseInt(semester),
    });
    if (!foundSemester) {
      foundSemester = await Semester.create({
        course: foundCourse._id,
        number: parseInt(semester),
      });
    }

    // Step 3: Get or create Subject
    let foundSubject = await Subject.findOne({
      name: subjectName,
      semester: foundSemester._id,
    });
    if (!foundSubject) {
      const autoGeneratedCode = `${course
        .slice(0, 3)
        .toUpperCase()}-${semester}-${Math.floor(1000 + Math.random() * 9000)}`;
      foundSubject = await Subject.create({
        name: subjectName,
        subjectCode: autoGeneratedCode,
        semester: foundSemester._id,
      });
    }

    // Step 4: Check for duplicate Note
    const existingNote = await Note.findOne({
      title,
      subject: foundSubject._id,
    });
    if (existingNote) {
      return res.status(400).json({
        success: false,
        message: "Note with same title already exists under this subject",
      });
    }

    // Step 5: Upload to Cloudinary
    const result = await streamUpload(req.file.buffer);

    // Step 6: Extract file extension
    const originalName = req.file.originalname || "";
    const ext = path.extname(originalName).toLowerCase().replace(".", ""); // e.g., 'pdf'

    // Normalize extensions
    let fileFormat = ext;
    if (["doc", "docx"].includes(ext)) fileFormat = "docx";
    else if (["ppt", "pptx"].includes(ext)) fileFormat = "pptx";
    else if (["xls", "xlsx"].includes(ext)) fileFormat = "xlsx";

    if (!["pdf", "docx", "txt", "pptx", "xlsx"].includes(fileFormat)) {
      return res
        .status(400)
        .json({ success: false, message: "Unsupported file format" });
    }
    const now = new Date();
    // Step 6: Create and save Note
    const note = new Note({
      title,
      fileUrl: result.secure_url,
      fileSize: `${(req.file.size / 1024 / 1024).toFixed(2)} MB`,
      subject: foundSubject._id,
      uploadedBy: req.user._id,
      fileFormat,
      uploadDate: formatDate(now),
    });

    await note.save();

    return res.status(201).json({ success: true, note });
  } catch (error) {
    console.error("Upload Note Error:", error);
    res.status(500).json({
      success: false,
      message: "Something went wrong during note upload",
    });
  }
};

//Download Note
export const downloadNote = async (req, res) => {
  try {
    const noteId = req.params.id;
    const note = await Note.findById(noteId);
    if (!note) {
      return res
        .status(404)
        .json({ success: false, message: "Note not found" });
    }

    // Increment download count
    note.downloads = (note.downloads || 0) + 1;
    await note.save();

    // Fetch file from Cloudinary (or remote URL)
    const fileResponse = await axios.get(note.fileUrl, {
      responseType: "stream",
    });
    res.setHeader(
      "Content-Disposition",
      `attachment; filename=\"${note.title}\"`
    );
    res.setHeader(
      "Content-Type",
      fileResponse.headers["content-type"] || "application/octet-stream"
    );
    fileResponse.data.pipe(res);
  } catch (error) {
    console.error("Download Note Error:", error);
    res.status(500).json({
      success: false,
      message: "Something went wrong during note download",
    });
  }
};

// viewNote.js (or inside your controller)
export const viewNote = async (req, res) => {
  try {
    const noteId = req.params.id;
    const note = await Note.findById(noteId);
    if (!note) {
      return res
        .status(404)
        .json({ success: false, message: "Note not found" });
    }

    res.redirect(note.fileUrl); // Redirects browser to open PDF in new tab
  } catch (error) {
    console.error("View Note Error:", error);
    res.status(500).json({ success: false, message: "Error opening note" });
  }
};

export const getNameByUserId = async (req, res) => {
  try {
    const userId = req.params.id;
    const user = await User.findById(userId);
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "User not found" });
    }
    res.status(200).json({
      success: true,
      fullName: user.fullName,
    });
  } catch (error) {
    console.error("Get User Name Error:", error);
    res
      .status(500)
      .json({ success: false, message: "Error fetching user name" });
  }
};
